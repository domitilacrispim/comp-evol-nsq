	#include<bits/stdc++.h>
using namespace std;

typedef struct ind {
    double dna[5], f1, f2, dcrow;
    int front;
}ind;

ind cria_ind ( ind a ){
    a.f1=0;
    a.f2=0;
    for( int i =0; i<5; i++){
        a.dna[i]=((double)rand()/(double)RAND_MAX) * 6;
        a.f1=a.f1+sin(3.14159*a.dna[i]); 
        a.f2=a.f2+cos(3.14159*a.dna[i]);
    }
	
    a.front=-1;
    return a;
}

ind avalia_cd (ind pop[1000], int i ) {
	if(pop[i].front!=pop[i+1].front) pop[i].dcrow=100;
	if(pop[i].front!=pop[i-1].front) pop[i].dcrow=100;
	else {
		pop[i].dcrow=pop[i+1].f1-pop[i-1].f1;
		pop[i].dcrow+=pop[i].f2;	
	}
	return pop[i];
}

ind avalia ( ind a ){
    for( int i =0; i<5; i++){
        a.f1=a.f1+sin(M_PI*a.dna[i]);
        a.f2=a.f2+cos(M_PI*a.dna[i]);
    }   
    return a;
}   
void avalia_pop ( ind pop[1000] ){
    int men1=0, men2=0;
    bool t=false;
    int flag=1000, c, tam=0, at=1;
    int fron[1000];
    while(true){
        t=false;
        for( int i=0; i<1000; i++){
            if(pop[i].front==-1) {
                if(!t) {men1=i; men2=i; t=true;}
                if (pop[men1].f1<pop[i].f1){
                    men1=i;       
                }
                if (pop[men2].f2<pop[i].f2){
                    men2=i;       
                }   
            }
        }
        fron[tam]=men1; tam++;
        if(men1!= men2) {fron[tam]=men2; tam++;}
        for( int i=0; i<1000; i++){
            if(pop[i].front==-1) {
                if (pop[men1].f2>pop[i].f2 &&  pop[men2].f1>pop[i].f1){
                    for(int j=0; j<tam; j++){
                        if(fron[j]>-1){
                            if( !(pop[fron[j]].f1>pop[i].f1 || pop[fron[j]].f2>pop[i].f2)) {
                                break;
                            }
                            else if (pop[fron[j]].f1>pop[i].f1 && pop[fron[j]].f2>pop[i].f2){
                                fron[j]=-1;
                            }
                        }
                        if((tam-1)==j){
                            fron[tam]=i; tam++;
                        }
                    }   
                }   
            }
        }
        c=0;
        for( int i=0; i<tam; i++){
            if(fron[i]>-1) {pop[fron[i]].front=at; c++;      
            }
        }
        tam=0;
        at++;   
        flag=flag-c;
        if(flag<=0) break;
        
    }
   
}
void mutacao ( ind a ){
	int ge=rand()%5, gi=rand()%5;
	if(gi<1)	 a.dna[ge]=((double)rand()/(double)RAND_MAX) * 6;
	
}





int torneio ( ind pop[1000]){
	int a, b, c;
	a=rand()%1000;
	b=rand()%1000;
	c=rand()%1000;	
	if(a==b || b==c) b=rand()%1000;	
	if(c==b || a==c) c=rand()%1000;
	if(a==b || a==c) a=rand()%1000;
	if(pop[a].front < pop[b].front && pop[a].front < pop[c].front  ) return a;
	if(pop[b].front < pop[c].front && pop[b].front < pop[a].front  ) return b;
	if(pop[c].front < pop[b].front && pop[c].front < pop[a].front  ) return c; //printf("DISGRAAAACA");
	pop[a]=avalia_cd(pop, a);
	pop[c]=avalia_cd(pop, c);
	pop[b]=avalia_cd(pop, b);
	if( pop[a].front == pop[b].front && pop[a].front == pop[c].front ) {
		if (pop[a].dcrow < pop[b].dcrow && pop[a].dcrow < pop[c].dcrow ) return a;
		if (pop[c].dcrow < pop[b].dcrow && pop[c].dcrow < pop[a].dcrow ) return c;
		if (pop[b].dcrow < pop[a].dcrow && pop[b].dcrow < pop[c].dcrow ) return b;		
	}
	if( pop[a].front == pop[b].front ) {
		if (pop[a].dcrow < pop[b].dcrow ) return a;
		if (pop[b].dcrow < pop[a].dcrow ) return b;
	}
	if( pop[c].front == pop[b].front ) {
		if (pop[c].dcrow < pop[b].dcrow ) return c;
		if (pop[b].dcrow < pop[c].dcrow ) return b;
	}
	if( pop[c].front == pop[a].front ) {
		if (pop[c].dcrow < pop[a].dcrow ) return c;
		if (pop[a].dcrow < pop[c].dcrow ) return a;
	}
	return b;
}



int ordena (const void * a , const void * b) {
	ind h;
	ind g;
	h=*(ind*)a;
	g=*(ind*)b;
	if(h.front>g.front) return 1;
	if(h.front<g.front) return -1;
	else if (h.f1>g.f1) return 1;
	return -1;
}
int ordena1 (const void * a , const void * b) {
	ind h;
	ind g;
	h=*(ind*)a;
	g=*(ind*)b;
	if(h.front>g.front) return 1;
	if(h.front<g.front) return -1;
	else if (h.f2>g.f2) return 1;
	return -1;
}


void cross ( ind pop[1000] ){
	int p, m, tam=0;
	ind f1, f2, dep[1000], res[1000];
	int a;
	for(int j=0; j<500; j++){
		f1.f1=0; f1.f2=0;
		f2.f1=0; f2.f2=0;
		a=rand()%5;
		p=torneio(pop);	
		m=torneio(pop); //printf(" %d %d %d ", j, p, m);
		if(p==m) torneio(pop); 
		for( int i=0; i<=a; i++){
			f1.dna[i]=pop[p].dna[i];
			f2.dna[i]=pop[m].dna[i];
		}
		for( int i=a+1; i<5; i++){
			f1.dna[i]=pop[m].dna[i];
			f2.dna[i]=pop[p].dna[i];
		}
		f1 = avalia(f1);
		f2 = avalia(f2);
		mutacao(f1);
		f1.front=-1;
		f2.front=-1;
		mutacao(f2);
		dep[tam]=f1; tam++;
		dep[tam]=f2; tam++;
		//printf("%lf %lf\n", f1.f1, f1.f2);
	}
	
	avalia_pop(dep); 
	  qsort (dep, 1000, sizeof(ind), ordena); 
	tam=0;
	int p1=0, r, f=0;
	while(tam!=1000){
		r=rand()%2;
		if(r%2==0){	
			if(pop[p1].f1 < dep[f].f1){
				res[tam]=pop[p1];
				p1++;
				tam++; continue;
			} 
			if(pop[p1].f1 > dep[f].f1){
				res[tam]=dep[f];
				f++;
				tam++; continue;
			}
		}
		if  (r%2==1){
			if(pop[p1].f2 < dep[f].f2){
				res[tam]=pop[p1];
				p1++;
				tam++; continue;
			}
			if(pop[p1].f2 > dep[f].f2){
				res[tam]=dep[f];
				f++;
				tam++; continue;
			}
			
		}
		if(pop[p1].front<dep[f].f1){
				res[tam]=pop[p1];
				p1++;
				tam++;
			}	
			else {
				res[tam]=dep[f];
				f++;
				tam++;
			}
		
	}
	for( int j=0; j<1000; j++){
		pop[j]=res[j];
	}
}


int main()
{
    srand (time(NULL));
  ind pop[1000];
  int nb1;
  double vl1, vl2;
  for(int i=0; i<1000; i++){
	
      pop[i]=cria_ind(pop[i]);
	
		
 }
for( int ger=0; ger<500; ger++){
 	avalia_pop(pop);	
	
	if(rand()%2==0)	qsort (pop, 1000, sizeof(ind), ordena);   
	if(rand()%2==1)	qsort (pop, 1000, sizeof(ind), ordena1);   
	cross(pop); 
	avalia_pop(pop);
	if(ger==499) {	
	for(int i=0; i<1000; i++) printf("%lf %lf\n", pop[i].f1, pop[i].f2	);

	
	printf("\n---\n");
}

}

}
